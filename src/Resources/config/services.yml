imports:
  - { resource: parameters.yml }
  - { resource: packages/cache.yml }
  - { resource: packages/monolog.yml }

services:
  _defaults:
    autowire: true
    autoconfigure: true

  _instanceof:
    # EXTENSION
    Ergonode\IntegrationShopware\Extension\AbstractErgonodeMappingExtension:
      tags: [ 'shopware.entity.extension' ]

    # TRANSFORMER
    Ergonode\IntegrationShopware\Transformer\CustomField\CustomFieldTransformerInterface:
      tags: [ 'ergonode_integration.custom_field_transformer' ]

    Ergonode\IntegrationShopware\Transformer\ProductCustomField\ProductCustomFieldTransformerInterface:
      tags: [ 'ergonode_integration.product_custom_field_transformer' ]

  # WIRE WHOLE NAMESPACE
  Ergonode\IntegrationShopware\:
    resource: '../../'

  # API
  Ergonode\IntegrationShopware\Api\Client\ErgonodeGqlClient:
    factory: [ '@Ergonode\IntegrationShopware\Api\Client\ErgonodeGqlClientFactory', 'createFromPluginConfig' ]

  Ergonode\IntegrationShopware\Api\Client\ErgonodeGqlClientFactory:

  # COMMAND
  Ergonode\IntegrationShopware\Command\CreateAttributeMappingCommand:
    arguments:
      $repository: '@ergonode_attribute_mapping.repository'

  Ergonode\IntegrationShopware\Command\CreateCustomFieldMappingCommand:
    arguments:
      $repository: '@ergonode_custom_field_mapping.repository'

  # ENTITY DEFINITION
  Ergonode\IntegrationShopware\Entity\ErgonodeAttributeMapping\ErgonodeAttributeMappingDefinition:
    tags: [ 'shopware.entity.definition' ]

  Ergonode\IntegrationShopware\Entity\ErgonodeAttributeMapping\ErgonodeCustomFieldMappingDefinition:
    tags: [ 'shopware.entity.definition' ]

  Ergonode\IntegrationShopware\Entity\ErgonodeMappingExtension\ErgonodeMappingExtensionDefinition:
    tags: [ 'shopware.entity.definition' ]

  Ergonode\IntegrationShopware\Entity\ErgonodeCategoryMappingExtension\ErgonodeCategoryMappingExtensionDefinition:
    tags: [ 'shopware.entity.definition' ]

  Ergonode\IntegrationShopware\Entity\ErgonodeCursor\ErgonodeCursorDefinition:
    tags: [ 'shopware.entity.definition' ]

  Ergonode\IntegrationShopware\Entity\ErgonodeSyncHistory\ErgonodeSyncHistoryDefinition:
    tags: [ 'shopware.entity.definition' ]

  Ergonode\IntegrationShopware\Entity\CategoryLastChildMapping\CategoryLastChildMappingDefinition:
    tags: [ 'shopware.entity.definition' ]

  # EXTENSION
  Ergonode\IntegrationShopware\Extension\ErgonodeCategoryMappingExtension:
    tags: [ 'shopware.entity.extension' ]

  # LOCK
  ergonode_integration.flock_store:
    class: Symfony\Component\Lock\Store\FlockStore

  ergonode_integration.lock_factory:
    class: Symfony\Component\Lock\LockFactory
    arguments:
      - '@ergonode_integration.flock_store'
    calls:
      - setLogger: [ '@monolog.logger.ergonodeSync' ]

  # MANAGER
  Ergonode\IntegrationShopware\Manager\ErgonodeCursorManager:
    arguments:
      $repository: '@ergonode_cursor.repository'

  # PROVIDER
  ergonode.integration_shopware.provider.attribute_mapping_provider:
    class: Ergonode\IntegrationShopware\Provider\AttributeMappingProvider
    arguments:
      $repository: '@ergonode_attribute_mapping.repository'

  ergonode.integration_shopware.provider.custom_field_mapping_provider:
    class: Ergonode\IntegrationShopware\Provider\AttributeMappingProvider
    arguments:
      $repository: '@ergonode_custom_field_mapping.repository'

  # RESOLVER
  Ergonode\IntegrationShopware\Resolver\CustomFieldTransformerResolver:
    arguments:
      - !tagged_iterator { tag: 'ergonode_integration.custom_field_transformer' }

  Ergonode\IntegrationShopware\Resolver\ProductCustomFieldTransformerResolver:
    arguments:
      - !tagged_iterator { tag: 'ergonode_integration.product_custom_field_transformer' }

  # SCHEDULED TASK
  Ergonode\IntegrationShopware\Service\ScheduledTask\FullSyncTask:
    tags: [ 'shopware.scheduled.task' ]

  # SERVICE
  Ergonode\IntegrationShopware\Service\History\SyncHistoryLogger:
    arguments:
      $kernelLogsDir: '%kernel.logs_dir%'
      $kernelEnv: '%kernel.environment%'
      $repository: '@ergonode_sync_history.repository'

  # TRANSFORMER
  Ergonode\IntegrationShopware\Transformer\ProductTransformerChain:
    arguments:
      $transformers:
        - '@Ergonode\IntegrationShopware\Transformer\ProductTransformer'
        - '@Ergonode\IntegrationShopware\Transformer\ProductCategoryTransformer'
        - '@Ergonode\IntegrationShopware\Transformer\ProductTaxTransformer'
        - '@Ergonode\IntegrationShopware\Transformer\ProductPriceTransformer'
        - '@Ergonode\IntegrationShopware\Transformer\ProductDefaultValuesTransformer'
        - '@Ergonode\IntegrationShopware\Transformer\ProductMediaTransformer'
        - '@Ergonode\IntegrationShopware\Transformer\ProductCustomFieldTransformer'
        - '@Ergonode\IntegrationShopware\Transformer\ProductExistingCustomFieldTransformer'
        - '@Ergonode\IntegrationShopware\Transformer\ProductPropertiesTransformer'
        - '@Ergonode\IntegrationShopware\Transformer\ProductCrossSellingTransformer'

  Ergonode\IntegrationShopware\Transformer\ProductTransformer:
    arguments:
      $attributeMappingProvider: '@ergonode.integration_shopware.provider.attribute_mapping_provider'

  Ergonode\IntegrationShopware\Transformer\ProductExistingCustomFieldTransformer:
    arguments:
      $customFieldMappingProvider: '@ergonode.integration_shopware.provider.custom_field_mapping_provider'

  # SUBSCRIBER
  Ergonode\IntegrationShopware\Subscriber\DeleteExtensionSubscriber:
    tags: [ 'kernel.event_subscriber' ]

  Ergonode\IntegrationShopware\Subscriber\DeleteCategoryExtensionSubscriber:
    tags: [ 'kernel.event_subscriber' ]

  Ergonode\IntegrationShopware\Subscriber\ClearCursorsSubscriber:
    tags: [ 'kernel.event_subscriber' ]

  # UTIL
  Ergonode\IntegrationShopware\Util\SyncPerformanceLogger:
    arguments:
      $enabled: '%ergonode_integration.use_performance_logger%'

  # HANDLER

  Ergonode\IntegrationShopware\MessageQueue\Handler\:
    resource: '../../MessageQueue/Handler/'
    arguments:
      $lockFactory: '@ergonode_integration.lock_factory'

  Ergonode\IntegrationShopware\MessageQueue\Handler\CategorySyncHandler:
      arguments:
        $processors:
          - '@Ergonode\IntegrationShopware\Processor\CategoryTreeSyncProcessor'
          - '@Ergonode\IntegrationShopware\Processor\CategorySyncProcessor'
